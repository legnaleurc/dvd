#! /usr/bin/env python3

import asyncio
from asyncio.subprocess import Process
import os
import signal
import sys
from collections.abc import Iterable
from pathlib import Path
from argparse import ArgumentParser


PUBLIC_PORT = 8000
PRIVATE_PORT = 9000

CMD_POETRY = ['poetry', 'run']
CMD_WATCHDOG = ['python3', '-m', 'wcpan.watchdog']
CMD_ENGINE = ['python3', '-m', 'engine']

CMD_DEV_ENGINE = CMD_POETRY + ['--'] + CMD_WATCHDOG + ['--'] + CMD_ENGINE
CMD_PRD_ENGINE = CMD_POETRY + ['--'] + CMD_ENGINE
CMD_DEV_VIEWER = ['npm', 'run', 'dev', '--']


class ProcessError(Exception):

    def __init__(self, rv: int):
        self._rv = rv

    def __str__(self):
        return f'failed with code: {self._rv}'


async def main(args: list[str] | None = None):
    if args is None:
        args = sys.argv

    setup()

    kwargs = parse_args(args)
    drive: str = kwargs.drive
    debug: bool = kwargs.debug
    public_listen: int = kwargs.public_listen
    private_listen: int = kwargs.private_listen
    token: str = kwargs.token

    drive_path = Path(drive).expanduser().absolute()

    try:
        if not debug:
            await run_release(
                drive=drive_path,
                public_listen=public_listen,
                token=token,
            )
        else:
            await run_debug(
                drive=drive_path,
                public_listen=public_listen,
                private_listen=private_listen,
                token=token,
            )
    except Exception as e:
        print(e)
        return 1

    return 0


def setup():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def parse_args(args: list[str]):
    parser = ArgumentParser('dvd')
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('--public-listen', type=int, default=PUBLIC_PORT)
    parser.add_argument('--private-listen', type=int, default=PRIVATE_PORT)
    parser.add_argument('--token', type=str)
    parser.add_argument('--drive', required=True, type=str)
    kwargs = parser.parse_args(args[1:])
    return kwargs


async def run_release(drive: Path, public_listen: int, token: str):
    await run_or_die(['make', '-j', 'release'])
    cmd = [
        *CMD_PRD_ENGINE,
        '-d', str(drive),
        '-u', '../unpack/release/unpack',
        '-s', '../viewer/build',
        '-p', str(public_listen),
    ]
    if token:
        cmd.extend(['-t', token])
    await run_or_die(cmd, cwd=Path('./engine'))


async def run_debug(
    drive: Path,
    public_listen: int,
    private_listen: int,
    token: str,
):
    await run_or_die(['make', '-j', 'debug'])

    cmd = [
        *CMD_DEV_ENGINE,
        '-d', str(drive),
        '-u', '../unpack/debug/unpack',
        '-p', str(private_listen),
    ]
    if token:
        cmd.extend(['-t', token])
    backend_process = await spawn(
        cmd,
        cwd=Path('./engine'),
    )
    backend_task = asyncio.create_task(ok_or_die(backend_process))

    cmd = [
        *CMD_DEV_VIEWER,
        '--host=0.0.0.0',
        f'--port={public_listen}',
    ]
    frontend_process = await spawn(
        cmd,
        cwd=Path('./viewer'),
        env=clone_env({
            'BACKEND_BASE_URL': f'http://localhost:{private_listen}',
        }),
    )
    frontend_task = asyncio.create_task(ok_or_die(frontend_process))

    backend_task.add_done_callback(lambda _: kill_process(frontend_process))
    frontend_task.add_done_callback(lambda _: kill_process(backend_process))

    done, _ = await asyncio.wait([
        backend_task,
        frontend_task,
    ])

    for task in done:
        try:
            task.result()
        except Exception:
            raise


async def run_or_die(cmd: Iterable[str], cwd: Path | None = None, env: dict[str, str] | None = None) -> None:
    p = await spawn(cmd, cwd=cwd, env=env)
    await ok_or_die(p)


async def spawn(cmd: Iterable[str], cwd: Path | None = None, env: dict[str, str] | None = None) -> Process:
    return await asyncio.create_subprocess_exec(*cmd, cwd=cwd, env=env)


async def ok_or_die(p: Process):
    rv = await p.wait()
    if rv > 0:
        raise ProcessError(rv)


def clone_env(override: dict[str, str] | None = None) -> dict[str, str]:
    env = os.environ.copy()
    if override:
        env.update(override)
    return env


def kill_process(p: Process):
    if p.returncode is not None:
        return
    p.send_signal(signal.SIGINT)


if __name__ == '__main__':
    sys.exit(asyncio.run(main()))
